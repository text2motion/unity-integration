/*
 * Text2Motion API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Text2MotionClientAPI.Client.OpenAPIDateConverter;

namespace Text2MotionClientAPI.Model
{
    /// <summary>
    /// Schema for bone.
    /// </summary>
    [DataContract(Name = "Bone")]
    public partial class Bone
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Bone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Bone" /> class.
        /// </summary>
        /// <param name="name">Name of the bone. (required).</param>
        /// <param name="matrix">4 by 4 Matrix for the bone (required).</param>
        /// <param name="children">children.</param>
        public Bone(string name = default(string), List<decimal> matrix = default(List<decimal>), List<Bone> children = default(List<Bone>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Bone and cannot be null");
            }
            this.Name = name;
            // to ensure "matrix" is required (not null)
            if (matrix == null)
            {
                throw new ArgumentNullException("matrix is a required property for Bone and cannot be null");
            }
            this.Matrix = matrix;
            this.Children = children;
        }

        /// <summary>
        /// Name of the bone.
        /// </summary>
        /// <value>Name of the bone.</value>
        /// <example>Bone</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 4 by 4 Matrix for the bone
        /// </summary>
        /// <value>4 by 4 Matrix for the bone</value>
        /// <example>[1,0,0,0,0,1,0,0,0,0,1,0,0.00212078,1.06488597,0.00347371,1]</example>
        [DataMember(Name = "matrix", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> Matrix { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", EmitDefaultValue = true)]
        public List<Bone> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bone {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Matrix: ").Append(Matrix).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
