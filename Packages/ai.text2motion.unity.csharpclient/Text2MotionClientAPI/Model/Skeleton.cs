/*
 * Text2Motion API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Text2MotionClientAPI.Client.OpenAPIDateConverter;

namespace Text2MotionClientAPI.Model
{
    /// <summary>
    /// Schema for skeleton.
    /// </summary>
    [DataContract(Name = "Skeleton")]
    public partial class Skeleton
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Skeleton" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Skeleton() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Skeleton" /> class.
        /// </summary>
        /// <param name="worldMatrix">4 by 4 Matrix for the skeleton position in the world. (required).</param>
        /// <param name="root">Root bone of the skeleton. (required).</param>
        public Skeleton(List<decimal> worldMatrix = default(List<decimal>), Bone root = default(Bone))
        {
            // to ensure "worldMatrix" is required (not null)
            if (worldMatrix == null)
            {
                throw new ArgumentNullException("worldMatrix is a required property for Skeleton and cannot be null");
            }
            this.WorldMatrix = worldMatrix;
            // to ensure "root" is required (not null)
            if (root == null)
            {
                throw new ArgumentNullException("root is a required property for Skeleton and cannot be null");
            }
            this.Root = root;
        }

        /// <summary>
        /// 4 by 4 Matrix for the skeleton position in the world.
        /// </summary>
        /// <value>4 by 4 Matrix for the skeleton position in the world.</value>
        /// <example>[0,0,0,0,99.9999999999999,4.3711388286738005E-6,0,0,-4.3711388286738005E-6,99.9999999999999,0,0,0,0,1]</example>
        [DataMember(Name = "world_matrix", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> WorldMatrix { get; set; }

        /// <summary>
        /// Root bone of the skeleton.
        /// </summary>
        /// <value>Root bone of the skeleton.</value>
        [DataMember(Name = "root", IsRequired = true, EmitDefaultValue = true)]
        public Bone Root { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Skeleton {\n");
            sb.Append("  WorldMatrix: ").Append(WorldMatrix).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
